<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello, Hexo and NexT!</title>
    <url>//post/200613/</url>
    <content><![CDATA[<p>I start my personal blog today!</p>
<a id="more"></a>

<p>And this post will test various features in Hexo, NexT, and Markdown!</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>Hello, world!</tag>
      </tags>
  </entry>
  <entry>
    <title>网络爬虫玩具性实战：公主连结官方壁纸、头像下载</title>
    <url>//post/200619/</url>
    <content><![CDATA[<h1 id="问题定义"><a href="#问题定义" class="headerlink" title="问题定义"></a>问题定义</h1><p>今天我们来搞一搞公主连结官方发布的壁纸和头像的爬虫及下载。</p>
<p>公主连结HP：<br><a href="https://priconne-redive.jp/" target="_blank" rel="noopener">プリンセスコネクト！Re:Dive (プリコネR) 公式サイト | Cygames</a></p>
<p>主要涉及的网站：<br><a href="https://priconne-redive.jp/fankit02/" target="_blank" rel="noopener">ファンキット | プリンセスコネクト！Re:Dive (プリコネR) 公式サイト | Cygames</a></p>
<a id="more"></a>

<p>其中的<a href="https://priconne-redive.jp/fankit02/?type=event" target="_blank" rel="noopener">イベント</a>部分为官方发布的所有的活动，包含我们想要的壁纸和头像，因此对此进行爬虫可达到我们目的。</p>
<ol>
<li><p><a href="https://priconne-redive.jp/fankit02/?type=event" target="_blank" rel="noopener">イベント</a>页面</p>
<img src="/post/200619/1.png" class="" title="图1：ファンキット页面">
</li>
<li><p>我们想要下载的壁纸和头像（例：<a href="https://priconne-redive.jp/fankit02/8856/" target="_blank" rel="noopener">第8856号イベント页面</a>）<span id="img2"></span></p>
<img src="/post/200619/2.png" class="" title="图2：我们想要下载的壁纸和头像">

</li>
</ol>
<h1 id="状况分析"><a href="#状况分析" class="headerlink" title="状况分析"></a>状况分析</h1><ol>
<li><p>对于每一个ファンキット页面，我们发现合法的页面的标号是从1开始到无穷的。<br>1) 第0页：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;priconne-redive.jp&#x2F;fankit02&#x2F;page&#x2F;0&#x2F;?type&#x3D;event</span><br></pre></td></tr></table></figure>
<p>返回与第1页相同的内容，但URL保持不变。不妨跳过第0页的爬虫。</p>
<p>2) 第1页：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;priconne-redive.jp&#x2F;fankit02&#x2F;page&#x2F;1&#x2F;?type&#x3D;event</span><br></pre></td></tr></table></figure>
<p>返回第1页，并且URL自动变为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;priconne-redive.jp&#x2F;fankit02&#x2F;?type&#x3D;event</span><br></pre></td></tr></table></figure>
<p>但我们可以忽视此URL变化的问题，因为用原URL请求，返回的内容也是没有问题的。</p>
<p>3) 第2页：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;priconne-redive.jp&#x2F;fankit02&#x2F;page&#x2F;2&#x2F;?type&#x3D;event</span><br></pre></td></tr></table></figure>
<p>正常返回第2页内容。</p>
<p>4) 到2020/06/19时间节点为止一共有2页。从第3页开始：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;priconne-redive.jp&#x2F;fankit02&#x2F;page&#x2F;3&#x2F;?type&#x3D;event</span><br></pre></td></tr></table></figure>
<p>虽然正常返回页面，但页面里<strong>不存在</strong>任何一个イベント页面。如下图：</p>
<img src="/post/200619/3.png" class="" title="图3：终止条件页面">
<p>这成为我们的爬虫<strong>终止条件</strong>。</p>
</li>
<li><p>在每一个ファンキット页面里存在多个イベント页面。对于每一个イベント页面，其URL格式均为如下形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;priconne-redive.jp&#x2F;fankit02&#x2F;[0-9]*&#x2F;</span><br></pre></td></tr></table></figure>
<p>在此，我们以请求<a href="https://priconne-redive.jp/fankit02/8856/" target="_blank" rel="noopener">第8856号イベント页面</a>为例（<a href="#img2">图2</a>）<br>1) 我们发现其中所有有价值的图片文件的URL前缀均为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;priconne-redive.jp&#x2F;ele-wp&#x2F;wp-content&#x2F;uploads&#x2F;</span><br></pre></td></tr></table></figure>

<p>2) 并且，我们设置了如下后续的正则表达式，以确定有价值的JPG或PNG图片名称：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[0-9]+&#x2F;[0-9]+&#x2F;[a-zA-Z0-9]*\.(?:jpg|png)</span><br></pre></td></tr></table></figure>

<p>3) 最终，核心的正则表达式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;priconne-redive.jp&#x2F;ele-wp&#x2F;wp-content&#x2F;uploads&#x2F;[0-9]+&#x2F;[0-9]+&#x2F;[a-zA-Z0-9]*\.(?:jpg|png)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="解决流程"><a href="#解决流程" class="headerlink" title="解决流程"></a>解决流程</h1><ol>
<li><p>从1向无穷循环<br>1) 与基本URL（<code>https://priconne-redive.jp/fankit02/page</code>）拼接递增的页码号，生成各个ファンキット页面URL，并设置<code>type=event</code>进行GET请求，获取HTML内容：</p>
<figure class="highlight python"><figcaption><span>getResURLs(base_url)</span></figcaption><table><tr><td class="code"><pre><span class="line">url = base_url + <span class="string">"/"</span> + str(i)</span><br><span class="line">params = &#123;<span class="string">'type'</span>: <span class="string">'event'</span>&#125;      <span class="comment"># https://.../page/1 -&gt; 2/?type=event</span></span><br><span class="line">r = requests.get(url, params=params)</span><br><span class="line">s = r.text</span><br></pre></td></tr></table></figure>

<p>2) 对返回的HTML内容进行如下正则匹配：</p>
<figure class="highlight python"><figcaption><span>getResURLs(base_url)</span></figcaption><table><tr><td class="code"><pre><span class="line">pattern = <span class="string">"https://priconne-redive.jp/fankit02/[0-9]*/"</span></span><br><span class="line">resURLListTemp = re.findall(pattern=pattern, string=s)</span><br></pre></td></tr></table></figure>
<p>如果没有获取任何内容，则说明此页面已经没有任何イベント内容，结束循环并确定爬虫范围。</p>
</li>
<li><p>对上个步骤获得的所有イベントURL进行遍历<br>1) 按URL确定本地下载文件夹名。例如，<a href="https://priconne-redive.jp/fankit02/8856/" target="_blank" rel="noopener">第8856号イベント页面</a>的本地下载文件夹名为<code>8856</code>。<br>如果不存在，则创建；如果已存在，则跳过创建。</p>
<figure class="highlight python"><figcaption><span>downloadImgs(resURL)</span></figcaption><table><tr><td class="code"><pre><span class="line">resURL = resURL.rstrip(<span class="string">"/"</span>)        <span class="comment"># Delete '/' from right side.</span></span><br><span class="line">lastSlashPos = resURL.rfind(<span class="string">'/'</span>)</span><br><span class="line">folderName = resURL[lastSlashPos + <span class="number">1</span>:]</span><br><span class="line">folderPath = <span class="string">"./allImg/"</span> + folderName</span><br><span class="line">isExists = os.path.exists(folderPath)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> isExists == <span class="literal">False</span>:</span><br><span class="line"> os.makedirs(folderPath)</span><br><span class="line"> print(<span class="string">"\t├Create: Path \""</span> + folderPath + <span class="string">"\" not exists."</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"> print(<span class="string">"\t├Skip: Path \""</span> + folderPath + <span class="string">"\" exists."</span>)</span><br></pre></td></tr></table></figure>

<p>2) 对URL进行GET请求，获得此页面内的所有有价值的JPG或PNG图片</p>
<figure class="highlight python"><figcaption><span>getImgURLs(resURL)</span></figcaption><table><tr><td class="code"><pre><span class="line">r = requests.get(resURL)</span><br><span class="line">s = r.text</span><br><span class="line"></span><br><span class="line">pattern = <span class="string">"https://priconne-redive.jp/ele-wp/wp-content/uploads/[0-9]+/[0-9]+/[a-zA-Z0-9]*\.(?:jpg|png)"</span></span><br><span class="line">imgURLList = re.findall(pattern=pattern, string=s)</span><br></pre></td></tr></table></figure>

<p>3) 对每一个图片的URL进行下载。<br>如果不存在，则下载；如果存在，则跳过。</p>
<figure class="highlight python"><figcaption><span>downloadImgs(resURL)</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> index, imgURL <span class="keyword">in</span> enumerate(imgURLList):</span><br><span class="line">    <span class="comment"># Create image</span></span><br><span class="line">    lastSlashPos = imgURL.rfind(<span class="string">'/'</span>)</span><br><span class="line">    imgName = imgURL[lastSlashPos + <span class="number">1</span>:]</span><br><span class="line">    imgPath = folderPath + <span class="string">'/'</span> + imgName</span><br><span class="line">    isExists = os.path.exists(imgPath)</span><br><span class="line">    <span class="keyword">if</span> isExists == <span class="literal">False</span>:</span><br><span class="line">        <span class="keyword">with</span> open(imgPath, <span class="string">'wb'</span>) <span class="keyword">as</span> imgFile:</span><br><span class="line">            <span class="comment"># Get image</span></span><br><span class="line">            r = requests.get(imgURL)</span><br><span class="line">            img = r.content</span><br><span class="line"></span><br><span class="line">            imgFile.write(img)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><div class='spoiler collapsed'>
    <div class='spoiler-title'>
        Full code
    </div>
    <div class='spoiler-content'>
        <figure class="highlight python"><figcaption><span>PCRBGIconDownload.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getResURLs</span><span class="params">(base_url)</span>:</span></span><br><span class="line">    resURLList = []</span><br><span class="line"></span><br><span class="line">    i = <span class="number">1</span>       <span class="comment"># Page from 1 to INF</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        url = base_url + <span class="string">"/"</span> + str(i)</span><br><span class="line">        params = &#123;<span class="string">'type'</span>: <span class="string">'event'</span>&#125;      <span class="comment"># https://.../page/1 -&gt; 2/?type=event</span></span><br><span class="line">        r = requests.get(url, params=params)</span><br><span class="line">        s = r.text</span><br><span class="line"></span><br><span class="line">        pattern = <span class="string">"https://priconne-redive.jp/fankit02/[0-9]*/"</span></span><br><span class="line">        resURLListTemp = re.findall(pattern=pattern, string=s)</span><br><span class="line">        <span class="keyword">if</span> len(resURLListTemp) == <span class="number">0</span>:        <span class="comment"># End condition</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            resURLList += resURLListTemp</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Get &#123;resURLNum&#125; event pages."</span>.format(resURLNum=len(resURLList)))</span><br><span class="line">    <span class="comment"># printList(resURLList)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> resURLList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloadImgs</span><span class="params">(resURL)</span>:</span></span><br><span class="line">    resURL = resURL.rstrip(<span class="string">"/"</span>)        <span class="comment"># Delete '/' from right side.</span></span><br><span class="line">    lastSlashPos = resURL.rfind(<span class="string">'/'</span>)</span><br><span class="line">    folderName = resURL[lastSlashPos + <span class="number">1</span>:]</span><br><span class="line">    folderPath = <span class="string">"./allImg/"</span> + folderName</span><br><span class="line"></span><br><span class="line">    isExists = os.path.exists(folderPath)</span><br><span class="line">    <span class="keyword">if</span> isExists == <span class="literal">False</span>:</span><br><span class="line">        os.makedirs(folderPath)</span><br><span class="line">        print(<span class="string">"\t├Create: Path \""</span> + folderPath + <span class="string">"\" not exists."</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"\t├Skip: Path \""</span> + folderPath + <span class="string">"\" exists."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Download contests</span></span><br><span class="line">    print(<span class="string">"\t├Downloading event "</span> + folderName + <span class="string">"..."</span>)</span><br><span class="line">    imgURLList = getImgURLs(resURL)</span><br><span class="line">    <span class="keyword">for</span> index, imgURL <span class="keyword">in</span> enumerate(imgURLList):</span><br><span class="line">        <span class="comment"># Create image</span></span><br><span class="line">        lastSlashPos = imgURL.rfind(<span class="string">'/'</span>)</span><br><span class="line">        imgName = imgURL[lastSlashPos + <span class="number">1</span>:]</span><br><span class="line">        imgPath = folderPath + <span class="string">'/'</span> + imgName</span><br><span class="line">        isExists = os.path.exists(imgPath)</span><br><span class="line">        <span class="keyword">if</span> isExists == <span class="literal">False</span>:</span><br><span class="line">            <span class="keyword">with</span> open(imgPath, <span class="string">'wb'</span>) <span class="keyword">as</span> imgFile:</span><br><span class="line">                <span class="comment"># Get image</span></span><br><span class="line">                r = requests.get(imgURL)</span><br><span class="line">                img = r.content</span><br><span class="line"></span><br><span class="line">                imgFile.write(img)</span><br><span class="line">            <span class="keyword">if</span>(index + <span class="number">1</span> &lt; len(imgURLList)):</span><br><span class="line">                print(<span class="string">"\t│\t\t├[&#123;&#125;/&#123;&#125;] Downloaded: \"&#123;&#125;\"."</span>.format(index + <span class="number">1</span>, len(imgURLList), imgPath))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"\t│\t\t└[&#123;&#125;/&#123;&#125;] Downloaded: \"&#123;&#125;\"."</span>.format(index + <span class="number">1</span>, len(imgURLList), imgPath))</span><br><span class="line"></span><br><span class="line">            time.sleep(<span class="number">0.2</span>)  <span class="comment"># Let's protect our PCR server... :)</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span>(index + <span class="number">1</span> &lt; len(imgURLList)):</span><br><span class="line">                print(<span class="string">"\t│\t\t├[&#123;&#125;/&#123;&#125;] Skip: Image \"&#123;&#125;\" exists."</span>.format(index + <span class="number">1</span>, len(imgURLList), imgPath))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"\t│\t\t└[&#123;&#125;/&#123;&#125;] Skip: Image \"&#123;&#125;\" exists."</span>.format(index + <span class="number">1</span>, len(imgURLList), imgPath))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"\t└Event &#123;folderName&#125; downloaded."</span>.format(folderName=folderName))</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getImgURLs</span><span class="params">(resURL)</span>:</span></span><br><span class="line"></span><br><span class="line">    r = requests.get(resURL)</span><br><span class="line">    s = r.text</span><br><span class="line"></span><br><span class="line">    pattern = <span class="string">"https://priconne-redive.jp/ele-wp/wp-content/uploads/[0-9]+/[0-9]+/[a-zA-Z0-9]*\.(?:jpg|png)"</span></span><br><span class="line">    imgURLList = re.findall(pattern=pattern, string=s)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"\t│\t└Get &#123;imgURLNum&#125; jpg/png images."</span>.format(imgURLNum=len(imgURLList)))</span><br><span class="line">    <span class="comment"># printList(imgURLList)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> imgURLList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printList</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> content <span class="keyword">in</span> list:</span><br><span class="line">        print(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">"---------- GET ALL EVENT PAGES ----------"</span>)</span><br><span class="line">    base_url = <span class="string">"https://priconne-redive.jp/fankit02/page"</span></span><br><span class="line">    resURLList = getResURLs(base_url)        <span class="comment"># All event pages, which includes all BG links in each event.</span></span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"---------- START DOWNLOADING ----------"</span>)</span><br><span class="line">    <span class="keyword">for</span> index, resURL <span class="keyword">in</span> enumerate(resURLList):</span><br><span class="line">        print(<span class="string">"[&#123;&#125;/&#123;&#125;] Processing: &#123;&#125;"</span>.format(index + <span class="number">1</span>, len(resURLList), resURL))</span><br><span class="line">        downloadImgs(resURL)</span><br><span class="line">    print(<span class="string">"---------- DOWNLOAD FINISHED! ----------"</span>)</span><br></pre></td></tr></table></figure>
    </div>
</div>

<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a></p>
<p><a href="https://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT 使用文档</a></p>
<p><a href="https://www.jianshu.com/p/cf0628478a4e" target="_blank" rel="noopener">Hexo发布博客引用自带图片的方法 - 简书</a></p>
<p><a href="https://blog.csdn.net/weixin_41910694/article/details/91629999" target="_blank" rel="noopener">MarkDown页面添加锚点,跳转到本页指定位置</a></p>
<p><a href="https://qcmoke.netlify.app/blog/hexo_code.html" target="_blank" rel="noopener">hexo代码块进阶写法 | Qcmoke’s Blog</a></p>
<p><a href="https://blog.csdn.net/u014644574/article/details/105575391" target="_blank" rel="noopener">正则表达式 - (?!), (?:), (?=)_u014644574的博客-CSDN博客_正则表的是(?=</a></p>
<p><a href="https://github.com/fletchto99/hexo-sliding-spoiler" target="_blank" rel="noopener">fletchto99/hexo-sliding-spoiler</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>Web crawler</tag>
        <tag>Regex</tag>
        <tag>プリコネR</tag>
      </tags>
  </entry>
</search>
